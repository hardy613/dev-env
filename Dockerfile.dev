ARG UBUNTU_RELEASE=bionic

FROM ubuntu:${UBUNTU_RELEASE}

LABEL MAINTAINER hardy613@gmail.com

ARG UBUNTU_RELEASE

ENV UBUNTU_RELEASE=${UBUNTU_RELEASE}

ENV DOCKER_USER sly613

RUN apt-get update && \
	apt-get install -y apt-utils sudo

# remove sudo password
RUN adduser --disabled-password --gecos '' "$DOCKER_USER" && \
	adduser "$DOCKER_USER" sudo && \
# Give passwordless sudo. This is only acceptable as it is a private
# development environment not exposed to the outside world. Do NOT do this on
# your host machine or otherwise.
	echo '%sudo ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && \
# remove the notification
	touch ~/.sudo_as_admin_successful

# env for build and for container
ENV USER "$DOCKER_USER"

USER "$DOCKER_USER"

ENV HOME "/home/$USER"

WORKDIR "$HOME/code"

# tools
RUN sudo apt-get update && \
	sudo apt-get install -y build-essential && \
	sudo apt-get install -y cmake && \
	sudo apt-get install -y curl && \
	sudo apt-get install -y openssh-client && \
	sudo apt-get install -y man-db && \
	sudo apt-get install -y bash-completion && \
	sudo apt-get install -y software-properties-common && \
	sudo apt-get install --no-install-recommends -y language-pack-en-base

# git
RUN sudo apt-get install --no-install-recommends -y software-properties-common && \
	sudo apt-add-repository ppa:git-core/ppa && \
	sudo apt-get update && \
	sudo apt-get install --no-install-recommends -y git && \
	sudo apt-get purge -y software-properties-common

ENV LC_ALL="en_US.UTF-8"
ENV LANG="en_US.UTF-8"
ENV LANGUAGE="en_US.UTF-8"
# tmux
ENV TMUX_VERSION 2.7

ENV TMUX_TAR "tmux-$TMUX_VERSION.tar.gz"

RUN curl -Lo "/tmp/$TMUX_TAR" \
	"https://github.com/tmux/tmux/releases/download/$TMUX_VERSION/$TMUX_TAR"

WORKDIR /tmp

RUN tar -xzf "$TMUX_TAR" -C /tmp

WORKDIR "/tmp/tmux-$TMUX_VERSION"

RUN sudo apt-get install -y libevent-2.1-6 libevent-dev libncurses-dev && \
	./configure && \
	make && \
	sudo make install

ENV TERM=screen-256color

WORKDIR "$HOME"

COPY ./.tmux.conf "$HOME/.tmux.conf"

RUN sudo chown "$USER:$USER" "$HOME/.tmux.conf"

# node LTS
RUN curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash

ENV NVM_DIR $HOME/.nvm

RUN . "$NVM_DIR/nvm.sh" && \
	nvm install --lts && \
	nvm alias default stable

# rust nightly
# Install openssl/pkgconf to compile against for reqwest and Iron.
RUN sudo apt-get update && \
	sudo apt-get install pkgconf libssl-dev libasound2-dev libx11-xcb-dev --no-install-recommends -y && \
	curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly

ENV RUST_DEFAULT_TOOLCHAIN='nightly'

RUN . $HOME/.cargo/env && \
	cargo install cargo-watch && \
	rustup component add rust-src --toolchain nightly && \
# RUST WASM support
	curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh && \
	cargo install cargo-generate

# Java
RUN sudo apt-get update && \
	DEBIAN_FRONTEND=noninteractive && \
	sudo apt-get -y install openjdk-11-jdk-headless && \
	sudo apt-get clean && \
	sudo rm -rf /var/lib/apt/lists/*

# python
RUN sudo apt-get update && \
	sudo apt-get install -y python3-pip && \
	sudo pip3 install --upgrade pip && \
	sudo pip3 install flake8 jedi virtualenv ptpython neovim pipenv poetry && \
	sudo apt-get install -y --no-install-recommends python3-dev python3-venv

# Power TMUX, doing this here cause we need pip
RUN sudo pip3 install powerline-status powerline-gitstatus && \
# xclip pgcli
	sudo apt-get install -y xclip pgcli

# nvim
RUN sudo apt-get install --no-install-recommends -y software-properties-common && \
	sudo apt-add-repository ppa:neovim-ppa/unstable && \
	sudo apt-get update && \
	sudo apt-get install neovim -y && \
	mkdir -p "$HOME/.config/nvim" && \
	sudo apt-get purge -y software-properties-common

ENV EDITOR nvim

# nvim plugins
COPY ./init.vim "$HOME/.config/nvim/init.vim"

#RUN sudo chown "$USER:$USER" "$HOME/.config/nvim/init.vim" && \
#	curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs \
#	https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim && \
#	nvim +PlugInstall +qall && \
#	. "$NVM_DIR/nvm.sh" && \
#	. "$HOME/.cargo/env" && \
#	python3 "$HOME/.config/nvim/plugged/YouCompleteMe/install.py" --racer-completer --ts-completer

RUN . "$NVM_DIR/nvm.sh" && \
	npm install typescript -g

# .bashrc alias
COPY ./.bashrc /tmp/.bashrc

# Compose
RUN sudo pip3 install docker-compose && \
	sudo groupadd -g 999 docker && \
	sudo usermod -aG docker "$DOCKER_USER"

RUN sudo cat /tmp/.bashrc >> "$HOME/.bashrc"

CMD ["tmux", "new"]

# vim: set ft=dockerfile:
